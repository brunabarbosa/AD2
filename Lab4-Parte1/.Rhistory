#Dataframe sem as notas das displinas que os alunos cursaram no quarto periodo
test.sem.4.P <- test %>% mutate(MAT_MEDIA_FINAL = ifelse(periodo_relativo == 4, NA, MAT_MEDIA_FINAL))
remove.inf <- function(x) ifelse(x==-Inf,NA,x)
#Transformar o formato do treino
train.dcast <- train %>%
dcast(MAT_NOVA_MATRICULA ~ NOME_DISCIPLINA, fun.aggregate = max, value.var = "MAT_MEDIA_FINAL") %>%
mutate_each(funs(remove.inf),-MAT_NOVA_MATRICULA) %>%
select(-starts_with('NA'))
#Transformar o formato do treino
test.sem.4.p.dcast <- test.sem.4.P %>%
dcast(MAT_NOVA_MATRICULA ~ NOME_DISCIPLINA, fun.aggregate = max, value.var = "MAT_MEDIA_FINAL") %>%
mutate_each(funs(remove.inf),-MAT_NOVA_MATRICULA) %>%
select(-starts_with('NA'))
R<-as.matrix(train.dcast[,-c(1)])
r <- as(R, "realRatingMatrix")
rec=Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=5))
##nn = 5
##Considera os 5 vizinhos mais similares ao aluno que desejamos prever as notas do quarto periodo
R.test <-as.matrix(test.sem.4.p.dcast[,-c(1)])
r.test <- as(R.test,"realRatingMatrix")
recom.test <- predict(rec, r.test, type="ratings")
recom.test
##Predicao das notas dos alunos no quarto periodo
predictedValues <- as(recom.test, "matrix")
##Concatena as predições com a matricula
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
##Transforma o formato do dataframe que contem as predições
##De wide para long
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
##Data frame que contem as notas reais dos alunos no quarto periodo
test.4.periodo <- test %>% filter(periodo_relativo == 4)
##Join entre as predições das notas e as notas reais
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.374707
library(readr)
library(dplyr)
library(recommenderlab)
library(reshape2)
library(ggplot2)
train <- read_csv("/home/bruna/Documents/AD2/Lab4-Parte1/lab4_part1_train_data.csv")
test <- read_csv("/home/bruna/Documents/AD2/Lab4-Parte1/lab4_part1_test_data.csv")
#Dataframe sem as notas das displinas que os alunos cursaram no quarto periodo
test.sem.4.P <- test %>% mutate(MAT_MEDIA_FINAL = ifelse(periodo_relativo == 4, NA, MAT_MEDIA_FINAL))
remove.inf <- function(x) ifelse(x==-Inf,NA,x)
#Transformar o formato do treino
train.dcast <- train %>%
dcast(MAT_NOVA_MATRICULA ~ NOME_DISCIPLINA, fun.aggregate = max, value.var = "MAT_MEDIA_FINAL") %>%
mutate_each(funs(remove.inf),-MAT_NOVA_MATRICULA) %>%
select(-starts_with('NA'))
#Transformar o formato do treino
test.sem.4.p.dcast <- test.sem.4.P %>%
dcast(MAT_NOVA_MATRICULA ~ NOME_DISCIPLINA, fun.aggregate = max, value.var = "MAT_MEDIA_FINAL") %>%
mutate_each(funs(remove.inf),-MAT_NOVA_MATRICULA) %>%
select(-starts_with('NA'))
R<-as.matrix(train.dcast[,-c(1)])
r <- as(R, "realRatingMatrix")
rec=Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=5))
##nn = 5
##Considera os 5 vizinhos mais similares ao aluno que desejamos prever as notas do quarto periodo
R.test <-as.matrix(test.sem.4.p.dcast[,-c(1)])
r.test <- as(R.test,"realRatingMatrix")
recom.test <- predict(rec, r.test, type="ratings")
recom.test
##Predicao das notas dos alunos no quarto periodo
predictedValues <- as(recom.test, "matrix")
##Concatena as predições com a matricula
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
##Transforma o formato do dataframe que contem as predições
##De wide para long
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
##Data frame que contem as notas reais dos alunos no quarto periodo
test.4.periodo <- test %>% filter(periodo_relativo == 4)
##Join entre as predições das notas e as notas reais
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.374707
rec20 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=20))
recom.test.20 <- predict(rec20, r.test, type="ratings")
predictedValues <- as(recom.test.20, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.374707
library(readr)
library(dplyr)
library(recommenderlab)
library(reshape2)
library(ggplot2)
train <- read_csv("/home/bruna/Documents/AD2/Lab4-Parte1/lab4_part1_train_data.csv")
test <- read_csv("/home/bruna/Documents/AD2/Lab4-Parte1/lab4_part1_test_data.csv")
#Dataframe sem as notas das displinas que os alunos cursaram no quarto periodo
test.sem.4.P <- test %>% mutate(MAT_MEDIA_FINAL = ifelse(periodo_relativo == 4, NA, MAT_MEDIA_FINAL))
remove.inf <- function(x) ifelse(x==-Inf,NA,x)
#Transformar o formato do treino
train.dcast <- train %>%
dcast(MAT_NOVA_MATRICULA ~ NOME_DISCIPLINA, fun.aggregate = max, value.var = "MAT_MEDIA_FINAL") %>%
mutate_each(funs(remove.inf),-MAT_NOVA_MATRICULA) %>%
select(-starts_with('NA'))
#Transformar o formato do treino
test.sem.4.p.dcast <- test.sem.4.P %>%
dcast(MAT_NOVA_MATRICULA ~ NOME_DISCIPLINA, fun.aggregate = max, value.var = "MAT_MEDIA_FINAL") %>%
mutate_each(funs(remove.inf),-MAT_NOVA_MATRICULA) %>%
select(-starts_with('NA'))
R<-as.matrix(train.dcast[,-c(1)])
r <- as(R, "realRatingMatrix")
rec=Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=5))
##nn = 5
##Considera os 5 vizinhos mais similares ao aluno que desejamos prever as notas do quarto periodo
R.test <-as.matrix(test.sem.4.p.dcast[,-c(1)])
r.test <- as(R.test,"realRatingMatrix")
recom.test <- predict(rec, r.test, type="ratings")
recom.test
##Predicao das notas dos alunos no quarto periodo
predictedValues <- as(recom.test, "matrix")
##Concatena as predições com a matricula
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
##Transforma o formato do dataframe que contem as predições
##De wide para long
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
##Data frame que contem as notas reais dos alunos no quarto periodo
test.4.periodo <- test %>% filter(periodo_relativo == 4)
##Join entre as predições das notas e as notas reais
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.374707
rec20 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=20))
recom.test.20 <- predict(rec20, r.test, type="ratings")
predictedValues <- as(recom.test.20, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.365528
rec50 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=50))
recom.test.50 <- predict(rec50, r.test, type="ratings")
predictedValues <- as(recom.test.50, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.365528
library(readr)
library(dplyr)
library(recommenderlab)
library(reshape2)
library(ggplot2)
train <- read_csv("/home/bruna/Documents/AD2/Lab4-Parte1/lab4_part1_train_data.csv")
test <- read_csv("/home/bruna/Documents/AD2/Lab4-Parte1/lab4_part1_test_data.csv")
#Dataframe sem as notas das displinas que os alunos cursaram no quarto periodo
test.sem.4.P <- test %>% mutate(MAT_MEDIA_FINAL = ifelse(periodo_relativo == 4, NA, MAT_MEDIA_FINAL))
remove.inf <- function(x) ifelse(x==-Inf,NA,x)
#Transformar o formato do treino
train.dcast <- train %>%
dcast(MAT_NOVA_MATRICULA ~ NOME_DISCIPLINA, fun.aggregate = max, value.var = "MAT_MEDIA_FINAL") %>%
mutate_each(funs(remove.inf),-MAT_NOVA_MATRICULA) %>%
select(-starts_with('NA'))
#Transformar o formato do treino
test.sem.4.p.dcast <- test.sem.4.P %>%
dcast(MAT_NOVA_MATRICULA ~ NOME_DISCIPLINA, fun.aggregate = max, value.var = "MAT_MEDIA_FINAL") %>%
mutate_each(funs(remove.inf),-MAT_NOVA_MATRICULA) %>%
select(-starts_with('NA'))
R<-as.matrix(train.dcast[,-c(1)])
r <- as(R, "realRatingMatrix")
rec=Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=5))
##nn = 5
##Considera os 5 vizinhos mais similares ao aluno que desejamos prever as notas do quarto periodo
R.test <-as.matrix(test.sem.4.p.dcast[,-c(1)])
r.test <- as(R.test,"realRatingMatrix")
recom.test <- predict(rec, r.test, type="ratings")
recom.test
##Predicao das notas dos alunos no quarto periodo
predictedValues <- as(recom.test, "matrix")
##Concatena as predições com a matricula
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
##Transforma o formato do dataframe que contem as predições
##De wide para long
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
##Data frame que contem as notas reais dos alunos no quarto periodo
test.4.periodo <- test %>% filter(periodo_relativo == 4)
##Join entre as predições das notas e as notas reais
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.374707
rec20 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=20))
recom.test.20 <- predict(rec20, r.test, type="ratings")
predictedValues <- as(recom.test.20, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.365528
rec50 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=50))
recom.test.50 <- predict(rec50, r.test, type="ratings")
predictedValues <- as(recom.test.50, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.348752
rec100 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=100))
recom.test.100 <- predict(rec100, r.test, type="ratings")
predictedValues <- as(recom.test.100, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.348752
rec500 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=500))
recom.test.500 <- predict(rec500, r.test, type="ratings")
predictedValues <- as(recom.test.500, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.333558
rec1000 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=500))
recom.test.1000 <- predict(rec1000, r.test, type="ratings")
predictedValues <- as(recom.test.1000, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.295927
unlink('lab4parte1_cache', recursive = TRUE)
library(readr)
library(dplyr)
library(recommenderlab)
library(reshape2)
library(ggplot2)
train <- read_csv("/home/bruna/Documents/AD2/Lab4-Parte1/lab4_part1_train_data.csv")
test <- read_csv("/home/bruna/Documents/AD2/Lab4-Parte1/lab4_part1_test_data.csv")
#Dataframe sem as notas das displinas que os alunos cursaram no quarto periodo
test.sem.4.P <- test %>% mutate(MAT_MEDIA_FINAL = ifelse(periodo_relativo == 4, NA, MAT_MEDIA_FINAL))
remove.inf <- function(x) ifelse(x==-Inf,NA,x)
#Transformar o formato do treino
train.dcast <- train %>%
dcast(MAT_NOVA_MATRICULA ~ NOME_DISCIPLINA, fun.aggregate = max, value.var = "MAT_MEDIA_FINAL") %>%
mutate_each(funs(remove.inf),-MAT_NOVA_MATRICULA) %>%
select(-starts_with('NA'))
#Transformar o formato do treino
test.sem.4.p.dcast <- test.sem.4.P %>%
dcast(MAT_NOVA_MATRICULA ~ NOME_DISCIPLINA, fun.aggregate = max, value.var = "MAT_MEDIA_FINAL") %>%
mutate_each(funs(remove.inf),-MAT_NOVA_MATRICULA) %>%
select(-starts_with('NA'))
R<-as.matrix(train.dcast[,-c(1)])
r <- as(R, "realRatingMatrix")
rec=Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=5))
##nn = 5
##Considera os 5 vizinhos mais similares ao aluno que desejamos prever as notas do quarto periodo
R.test <-as.matrix(test.sem.4.p.dcast[,-c(1)])
r.test <- as(R.test,"realRatingMatrix")
recom.test <- predict(rec, r.test, type="ratings")
recom.test
##Predicao das notas dos alunos no quarto periodo
predictedValues <- as(recom.test, "matrix")
##Concatena as predições com a matricula
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
##Transforma o formato do dataframe que contem as predições
##De wide para long
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
##Data frame que contem as notas reais dos alunos no quarto periodo
test.4.periodo <- test %>% filter(periodo_relativo == 4)
##Join entre as predições das notas e as notas reais
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.374707
rec20 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=20))
recom.test.20 <- predict(rec20, r.test, type="ratings")
predictedValues <- as(recom.test.20, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.365528
rec100 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=100))
recom.test.100 <- predict(rec100, r.test, type="ratings")
predictedValues <- as(recom.test.100, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.333558
rec500 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=500))
recom.test.500 <- predict(rec500, r.test, type="ratings")
predictedValues <- as(recom.test.500, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.295927
rec1000 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=500))
recom.test.1000 <- predict(rec1000, r.test, type="ratings")
predictedValues <- as(recom.test.1000, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.295927
unlink('lab4parte1_cache', recursive = TRUE)
unlink('lab4parte1_cache', recursive = TRUE)
unlink('lab4parte1_cache', recursive = TRUE)
library(readr)
library(dplyr)
library(recommenderlab)
library(reshape2)
library(ggplot2)
train <- read_csv("/home/bruna/Documents/AD2/Lab4-Parte1/lab4_part1_train_data.csv")
test <- read_csv("/home/bruna/Documents/AD2/Lab4-Parte1/lab4_part1_test_data.csv")
#Dataframe sem as notas das displinas que os alunos cursaram no quarto periodo
test.sem.4.P <- test %>% mutate(MAT_MEDIA_FINAL = ifelse(periodo_relativo == 4, NA, MAT_MEDIA_FINAL))
remove.inf <- function(x) ifelse(x==-Inf,NA,x)
#Transformar o formato do treino
train.dcast <- train %>%
dcast(MAT_NOVA_MATRICULA ~ NOME_DISCIPLINA, fun.aggregate = max, value.var = "MAT_MEDIA_FINAL") %>%
mutate_each(funs(remove.inf),-MAT_NOVA_MATRICULA) %>%
select(-starts_with('NA'))
#Transformar o formato do treino
test.sem.4.p.dcast <- test.sem.4.P %>%
dcast(MAT_NOVA_MATRICULA ~ NOME_DISCIPLINA, fun.aggregate = max, value.var = "MAT_MEDIA_FINAL") %>%
mutate_each(funs(remove.inf),-MAT_NOVA_MATRICULA) %>%
select(-starts_with('NA'))
R<-as.matrix(train.dcast[,-c(1)])
r <- as(R, "realRatingMatrix")
rec=Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=5))
##nn = 5
##Considera os 5 vizinhos mais similares ao aluno que desejamos prever as notas do quarto periodo
R.test <-as.matrix(test.sem.4.p.dcast[,-c(1)])
r.test <- as(R.test,"realRatingMatrix")
recom.test <- predict(rec, r.test, type="ratings")
recom.test
##Predicao das notas dos alunos no quarto periodo
predictedValues <- as(recom.test, "matrix")
##Concatena as predições com a matricula
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
##Transforma o formato do dataframe que contem as predições
##De wide para long
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
##Data frame que contem as notas reais dos alunos no quarto periodo
test.4.periodo <- test %>% filter(periodo_relativo == 4)
##Join entre as predições das notas e as notas reais
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 5 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.374707
rec20 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=20))
recom.test.20 <- predict(rec20, r.test, type="ratings")
predictedValues <- as(recom.test.20, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 20 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.365528
rec100 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=100))
recom.test.100 <- predict(rec100, r.test, type="ratings")
predictedValues <- as(recom.test.100, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 100 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.333558
rec500 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=500))
recom.test.500 <- predict(rec500, r.test, type="ratings")
predictedValues <- as(recom.test.500, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 500 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.295927
rec1000 = Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=500))
recom.test.1000 <- predict(rec1000, r.test, type="ratings")
predictedValues <- as(recom.test.1000, "matrix")
pred.values.df <- cbind(MAT_NOVA_MATRICULA=test.sem.4.p.dcast$MAT_NOVA_MATRICULA,as.data.frame(predictedValues))
pred.values.df.melt <- melt(pred.values.df,id.vars = "MAT_NOVA_MATRICULA", variable.name = "NOME_DISCIPLINA") %>%
mutate(MAT_NOVA_MATRICULA = as.character(MAT_NOVA_MATRICULA),
NOME_DISCIPLINA = as.character(NOME_DISCIPLINA)) %>%
rename(mediaPred = value)
test.4.periodo <- test %>% filter(periodo_relativo == 4)
result.4.periodo <- inner_join(pred.values.df.melt,test.4.periodo)
##Erro para o modelo considerando os 1000 vizinhos mais proximos
RMSE(result.4.periodo$mediaPred,result.4.periodo$MAT_MEDIA_FINAL)
##RMSE
##[1] 2.295927
##Coluna contendo predicoes
summary(result.4.periodo$mediaPred)
##Coluna contendo predicoes
str(result.4.periodo$mediaPred)
##Coluna contendo predicoes
summary(result.4.periodo$mediaPred)
unlink('lab4parte1_cache', recursive = TRUE)
View(test)
View(test.sem.4.p.dcast)
