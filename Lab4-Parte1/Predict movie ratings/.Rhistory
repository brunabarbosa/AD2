install.packages("readr")
library(readr)
installed.packages("readr")
library(readr)
install.packages("readr")
library(readr)
library('readr')
library(readr)
statistics <- read_csv("~/Documents/Blackjack/evosuite-report/statistics.csv")
View(statistics)
setwd("/home/bruna/Documents/AD2/Lab4-Parte1/Predict movie ratings")
library(recommenderlab)
library(reshape2)
library(ggplot2)
tr<-read.csv("train_v2.csv",header=TRUE)
tr <- head(tr, 1000)
head(tr)
tr<-tr[,-c(1)]
tr[tr$user==1,]
g<-acast(tr, user ~ movie)
class(g)
R<-as.matrix(g)
class(R)
r <- as(R, "realRatingMatrix")
r
as(r, "list")     # A list
as(r, "matrix")   # A sparse matrix
head(as(r, "data.frame"))
r_m <- normalize(r)
r_m
as(r_m, "list")
image(r, main = "Raw Ratings")
image(r_m, main = "Normalized Ratings")
r_b <- binarize(r, minRating=1)
as(r_b, "matrix")
rec=Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=5))
print(rec)
names(getModel(rec))
getModel(rec)$nn
recom <- predict(rec, r[1:nrow(r)], type="ratings")
recom
View(as(recom, "matrix"))
setwd("/home/bruna/Documents/AD2/Lab4-Parte1/Predict movie ratings")
setwd("/home/bruna/Documents/AD2/Lab4-Parte1/Predict movie ratings")# If not installed, first install following three packages in R
library(recommenderlab)
library(reshape2)
library(ggplot2)
tr<-read.csv("train_v2.csv",header=TRUE)
tr <- head(tr, 1000)
head(tr)
tr<-tr[,-c(1)]
tr[tr$user==1,]
g<-acast(tr, user ~ movie)
class(g)
R<-as.matrix(g)
class(R)
r <- as(R, "realRatingMatrix")
r
as(r, "list")     # A list
as(r, "matrix")   # A sparse matrix
head(as(r, "data.frame"))
r_m <- normalize(r)
r_m
as(r_m, "list")
image(r, main = "Raw Ratings")
image(r_m, main = "Normalized Ratings")
r_b <- binarize(r, minRating=1)
as(r_b, "matrix")
rec=Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=5))
print(rec)
names(getModel(rec))
getModel(rec)$nn
test[,2]
test<-read.csv("test_v2.csv",header=TRUE)
head(test)
rec_list<-as(recom,"list")
head(summary(rec_list))
ratings<-NULL
head(test[,2])
View(test)
for ( u in 1:length(test[,2]))
{
# Read userid and movieid from columns 2 and 3 of test data
userid <- test[u,2]
movieid<-test[u,3]
# Get as list & then convert to data frame all recommendations for user: userid
u1<-as.data.frame(rec_list[[userid]])
# Create a (second column) column-id in the data-frame u1 and populate it with row-names
# Remember (or check) that rownames of u1 contain are by movie-ids
# We use row.names() function
u1$id<-row.names(u1)
# Now access movie ratings in column 1 of u1
x= u1[u1$id==movieid,1]
# print(u)
# print(length(x))
# If no ratings were found, assign 0. You could also
#   assign user-average
if (length(x)==0)
{
ratings[u] <- 0
}
else
{
ratings[u] <-x
}
}
rec_list<-as(recom,"list")
head(summary(rec_list))
ratings<-NULL
rec_list<-as(recom,"list")
recom <- predict(rec, r[1:nrow(r)], type="ratings")
recom
View(as(recom, "matrix"))
test<-read.csv("test_v2.csv",header=TRUE)
head(test)
rec_list<-as(recom,"list")
head(summary(rec_list))
ratings<-NULL
head(test[,2])
for ( u in 1:length(test[,2]))
{
# Read userid and movieid from columns 2 and 3 of test data
userid <- test[u,2]
movieid<-test[u,3]
# Get as list & then convert to data frame all recommendations for user: userid
u1<-as.data.frame(rec_list[[userid]])
# Create a (second column) column-id in the data-frame u1 and populate it with row-names
# Remember (or check) that rownames of u1 contain are by movie-ids
# We use row.names() function
u1$id<-row.names(u1)
# Now access movie ratings in column 1 of u1
x= u1[u1$id==movieid,1]
# print(u)
# print(length(x))
# If no ratings were found, assign 0. You could also
#   assign user-average
if (length(x)==0)
{
ratings[u] <- 0
}
else
{
ratings[u] <-x
}
}
for ( u in 1:length(test[,2]))
{
# Read userid and movieid from columns 2 and 3 of test data
userid <- test[u,2]
movieid<-test[u,3]
# Get as list & then convert to data frame all recommendations for user: userid
u1<-as.data.frame(rec_list[[userid]])
# Create a (second column) column-id in the data-frame u1 and populate it with row-names
# Remember (or check) that rownames of u1 contain are by movie-ids
# We use row.names() function
u1$id<-row.names(u1)
# Now access movie ratings in column 1 of u1
x= u1[u1$id==movieid,1]
# print(u)
# print(length(x))
# If no ratings were found, assign 0. You could also
#   assign user-average
if (length(x)==0)
{
ratings[u] <- 0
}
else
{
ratings[u] <-x
}
}
