library(readr)
graduados <- read_csv("~/Downloads/graduados.csv")
View(graduados)
library(readr)
library(dplyr)
graduados <- read_csv("graduados.csv", col_types = cols(matricula = col_character())) %>%
mutate(matricula = as.factor(matricula))
head(graduados)
str(graduados)
summary(graduados)
View(graduados)
graduados <- graduados %>%
arrange(matricula)
graduados.clean <- graduados %>%
filter(!is.na(media))
summary(graduados.clean)
View(graduados.clean)
graduados.cra <- graduados.clean %>%
group_by(matricula) %>%
mutate(cra.contrib = media*creditos) %>%
summarise(cra = sum(cra.contrib)/sum(creditos))
head(graduados.cra)
library(reshape2)
graduados.model.input <- graduados.clean %>%
group_by(matricula,disciplina)  %>%
filter(media == max(media)) %>%
ungroup() %>%
select(matricula,disciplina,media) %>%
mutate(disciplina = as.factor(gsub(" ",".",disciplina))) %>%
dcast(matricula ~ disciplina, mean) %>%
merge(graduados.cra)
head(graduados.model.input)
View(graduados.model.input)
submit <- data.frame(calc1 = graduados.model.input$Cálculo.Diferencial.e.Integral.I,
vetorial = graduados.model.input$Álgebra.Vetorial.e.Geometria.Analítica)
View(submit)
disciplinas <- data.frame(calc1 = graduados.model.input$Cálculo.Diferencial.e.Integral.I,
vetorial = graduados.model.input$Álgebra.Vetorial.e.Geometria.Analítica,
lpt = graduados.model.input$Leitura.e.Produção.de.Textos,
prog1 = graduados.model.input$Programação.I,
ic = graduados.model.input$Introdução.à.Computação,
lp1 = graduados.model.input$Laboratório.de.Programação.I,
calc2 = graduados.model.input$Cálculo.Diferencial.e.Integral.II,
md = graduados.model.input$Matemática.Discreta,
p2 = graduados.model.input$Teoria.dos.Grafos,
classica = graduados.model.input$Fundamentos.de.Física.Clássica,
lp2 = graduados.model.input$Laboratório.de.Programação.II)
View(disciplinas)
disciplinas.clean <- disciplinas %>%
filter(!is.na(media))
disciplinas.clean <- disciplinas %>%
filter(!is.na(calc1))
View(disciplinas)
uncleaned <- sapply(uncleaned, function(x) all(is.nan(x)))
disciplinas[,!uncleaned]
uncleaned <- sapply(disciplinas, function(x) all(is.nan(x)))
disciplinas[,!uncleaned]
Filter(function(x) !all(is.na(x)), disciplinas)
disciplinas.clean <- disciplinas %>%
filter(!is.na(calc1))
View(disciplinas.clean)
disciplinas.clean <- disciplinas %>%
filter(!is.na(calc1) & !is.na(calc2))
View(disciplinas)
View(disciplinas.clean)
disciplinas.clean <- disciplinas %>%
filter(!is.na(calc1) & !is.na(calc2) & !is.na(vetorial) & !is.na(lpt))
View(disciplinas)
View(disciplinas.clean)
library(GGally)
install.packages(GGally)
install.packages('GGally')
library(GGally)
library('GGally')
library(ggally)
require(GGally)
install.packages("GGally")
library("GGally")
ggpairs(disciplinas.clean)
disciplinas.clean <- disciplinas.clean %>% mutate(logcal2 = log(calc2))
ggpairs(disciplinas.clean)
disciplinas.clean <- disciplinas.clean %>% mutate(logcal2 = log10(calc2))
ggpairs(disciplinas.clean)
disciplinas.clean <- disciplinas.clean %>% mutate(logcal2 = sqrt(calc2))
ggpairs(disciplinas.clean)
disciplinas.clean <- disciplinas.clean %>% mutate(loglp2 = log(lp2))
ggpairs(disciplinas.clean)
disciplinas <- data.frame(calc1 = graduados.model.input$Cálculo.Diferencial.e.Integral.I,
vetorial = graduados.model.input$Álgebra.Vetorial.e.Geometria.Analítica,
lpt = graduados.model.input$Leitura.e.Produção.de.Textos,
prog1 = graduados.model.input$Programação.I,
ic = graduados.model.input$Introdução.à.Computação,
lp1 = graduados.model.input$Laboratório.de.Programação.I,
calc2 = graduados.model.input$Cálculo.Diferencial.e.Integral.II,
md = graduados.model.input$Matemática.Discreta,
p2 = graduados.model.input$Teoria.dos.Grafos,
classica = graduados.model.input$Fundamentos.de.Física.Clássica,
lp2 = graduados.model.input$Laboratório.de.Programação.II
cra = graduados.model.input$cra)
disciplinas <- data.frame(calc1 = graduados.model.input$Cálculo.Diferencial.e.Integral.I,
vetorial = graduados.model.input$Álgebra.Vetorial.e.Geometria.Analítica,
lpt = graduados.model.input$Leitura.e.Produção.de.Textos,
prog1 = graduados.model.input$Programação.I,
ic = graduados.model.input$Introdução.à.Computação,
lp1 = graduados.model.input$Laboratório.de.Programação.I,
calc2 = graduados.model.input$Cálculo.Diferencial.e.Integral.II,
md = graduados.model.input$Matemática.Discreta,
p2 = graduados.model.input$Teoria.dos.Grafos,
classica = graduados.model.input$Fundamentos.de.Física.Clássica,
lp2 = graduados.model.input$Laboratório.de.Programação.II
cra = graduados.model.input$cra)
disciplinas <- data.frame(calc1 = graduados.model.input$Cálculo.Diferencial.e.Integral.I,
vetorial = graduados.model.input$Álgebra.Vetorial.e.Geometria.Analítica,
lpt = graduados.model.input$Leitura.e.Produção.de.Textos,
prog1 = graduados.model.input$Programação.I,
ic = graduados.model.input$Introdução.à.Computação,
lp1 = graduados.model.input$Laboratório.de.Programação.I,
calc2 = graduados.model.input$Cálculo.Diferencial.e.Integral.II,
md = graduados.model.input$Matemática.Discreta,
p2 = graduados.model.input$Teoria.dos.Grafos,
classica = graduados.model.input$Fundamentos.de.Física.Clássica,
lp2 = graduados.model.input$Laboratório.de.Programação.II,
cra = graduados.model.input$cra)
disciplinas.clean <- disciplinas %>%
filter(!is.na(calc1) & !is.na(calc2) & !is.na(vetorial) & !is.na(lpt))
ggpairs(disciplinas.clean)
fit <- lm(cra  ~ .)
fit <- lm(cra  ~ ., data=disciplinas.clean)
summary(fit)
print(coef(fit))
?coef
print(mean(fit$residuals))
require(ggplot2)
p1 = ggplot(fit, aes(.fitted, .resid)) +
geom_point()
require(ggplot2)
p1 = ggplot(fit, aes(.fitted, .resid)) +
geom_point())
p1 = ggplot(fit, aes(.fitted, .resid)) +
geom_point()
p1
p1 = p1 + geom_hline(yintercept=0, col="red", linetype="dashed")
p1
qqnorm(fit$residuals)
qqline(fit$residuals, col = 2,lwd=2,lty=2)
qqnorm(fit$residuals)
qqline(fit$residuals, col = 2,lwd=2,lty=2)
View(disciplinas.clean)
disciplinas <- data.frame(calc1 = graduados.model.input$Cálculo.Diferencial.e.Integral.I,
vetorial = graduados.model.input$Álgebra.Vetorial.e.Geometria.Analítica,
lpt = graduados.model.input$Leitura.e.Produção.de.Textos,
prog1 = graduados.model.input$Programação.I,
ic = graduados.model.input$Introdução.à.Computação,
lp1 = graduados.model.input$Laboratório.de.Programação.I,
calc2 = graduados.model.input$Cálculo.Diferencial.e.Integral.II,
md = graduados.model.input$Matemática.Discreta,
p2 = graduados.model.input$Teoria.dos.Grafos,
classica = graduados.model.input$Fundamentos.de.Física.Clássica,
lp2 = graduados.model.input$Laboratório.de.Programação.II,
cra = graduados.model.input$cra)
ggpairs(disciplinas.clean)
fit <- lm(cra  ~ ., data=disciplinas.clean)
summary(fit)
print(coef(fit))
print(mean(fit$residuals))
fit <- lm(cra  ~ ., data=disciplinas.clean)
summary(fit)
print(coef(fit))
print(mean(fit$residuals))
p1 = ggplot(fit, aes(.fitted, .resid)) +
geom_point()
p1 = p1 + geom_hline(yintercept=0, col="red", linetype="dashed")
p1 = p1 + xlab("Valores ajustados") + ylab("Resíduos")
p1 = p1 + ggtitle("Gráfico de Resíduos vs Ajustamento") +
theme_bw()
p1
qqnorm(fit$residuals)
qqline(fit$residuals, col = 2,lwd=2,lty=2)
fit <- lm(cra  ~ ., data=disciplinas.clean)
summary(fit)
fit <- lm(cra  ~ disciplinas.clean$p1, data=disciplinas.clean)
fit <- lm(cra  ~ disciplinas.clean$calc1, data=disciplinas.clean)
summary(fit)
fit <- lm(cra  ~ disciplinas.clean$calc1,
disciplinas.clean$vetorial,
disciplinas.clean$lpt,
disciplinas.clean$prog1,
disciplinas.clean$ic,
disciplinas.clean$lp1,
data=disciplinas.clean)
install.packages("rmarkdown")
fit <- lm(cra  ~ disciplinas.clean$calc1
disciplinas.clean$vetorial +
disciplinas.clean$lpt +
disciplinas.clean$prog1 +
disciplinas.clean$ic +
disciplinas.clean$lp1,
data=disciplinas.clean)
fit <- lm(cra  ~ disciplinas.clean$calc1
disciplinas.clean$vetorial,
disciplinas.clean$lpt,
disciplinas.clean$prog1,
disciplinas.clean$ic,
disciplinas.clean$lp1,
data=disciplinas.clean)
fit <- lm(cra  ~ disciplinas.clean$calc1,
disciplinas.clean$vetorial,
disciplinas.clean$lpt,
disciplinas.clean$prog1,
disciplinas.clean$ic,
disciplinas.clean$lp1,
data=disciplinas.clean)
fit <- lm(cra  ~ calc1,
vetorial,
lpt,
prog1,
ic,
lp1,
data=disciplinas.clean)
fit <- lm(cra  ~ calc1,
vetorial,
lpt,
prog1,
ic,
lp1,
data=disciplinas.clean)
View(disciplinas.clean)
#residuos primeiro periodo
fit <- lm(cra  ~ calc1 +
vetorial +
lpt +
prog1 +
ic +
lp1,
data=disciplinas.clean)
summary(fit)
print(coef(fit))
print(mean(fit$residuals))
ggpairs(disciplinas.clean)
fit <- lm(cra  ~ calc1 +
vetorial +
lpt +
ic +
lp1,
data=disciplinas.clean)
summary(fit)
ggpairs(disciplinas.clean %>% select(calc1, vetorial, lpt, ic, lp1))
fit <- lm(cra  ~ calc1 +
lpt +
ic +
lp1,
data=disciplinas.clean)
summary(fit)
fit <- lm(cra  ~ calc1 +
vetorial +
lpt +
ic ,
data=disciplinas.clean)
summary(fit)
fit <- lm(cra  ~ ., data=disciplinas.clean)
summary(fit)
fit <- lm(cra  ~ cal2 +
md +
lpt +
p2 +
classica +
lp2,
data=disciplinas.clean)
ggpairs(disciplinas.clean %>% select(cal2, md, lpt, lpt, p2, classica, lp2))
ggpairs(disciplinas.clean %>% select(calc2, md, lpt, lpt, p2, classica, lp2))
summary(fit)
ggpairs(disciplinas.clean %>% select(calc2, md, lpt, lpt, p2, classica, lp2))
fit <- lm(cra  ~ calc2 +
md +
lpt +
p2 +
classica +
lp2,
data=disciplinas.clean)
summary(fit)
setwd("~/AD2/Lab3-Parte1")
setwd("~/Documentos/AD2/Lab3-Parte1")
treino_classificacao <- read_csv("~/AD2/Lab3-Parte1/treino_classificacao.csv")
library(readr)
library(dplyr)
install.packages(c("readr", "dplyr"))
treino_classificacao <- read_csv("~/AD2/Lab3-Parte1/treino_classificacao.csv")
library(readr)
library(dplyr)
treino_classificacao <- read_csv("~/AD2/Lab3-Parte1/treino_classificacao.csv")
treino_classificacao <- read_csv("treino_classificacao.csv")
View(treino_classificacao)
p <- plot_ly(x = treino_classificacao$MAT_TUR_ANO, type = 'histogram')
p
str(treino_classificacao$MAT_TUR_ANO)
install.packages("plotly")
evadiram <- treino_classificacao[treino_classificacao$EVADIU == TRUE]
evadiram <- treino_classificacao[treino_classificacao$EVADIU == TRUE, ]
View(evadiram)
evadiram <- treino_classificacao[treino_classificacao$EVADIU == TRUE, ]
naoEvadiram <- treino_classificacao[treino_classificacao$EVADIU == FALSE, ]
View(naoEvadiram)
library(plotly)
install.packages("plotly")
library(plotly)
library('ploty')
packageVersion('plotly')
hist(treino_classificacao$MAT_TUR_ANO + treino_classificacao$EVADIU)
hist(evadiram$MAT_TUR_ANO)
evadiram2015 <- evadiram[evadiram$MAT_TUR_ANO == 2015, ]
View(evadiram2015)
evadiram2015 <- evadiram[evadiram$MAT_TUR_ANO == 2014, ]
View(evadiram2015)
evadiram2011 <- evadiram[evadiram$MAT_TUR_ANO == 2011, ]
evadiram2011 <- evadiram[evadiram$MAT_TUR_ANO == 2011, ]
evadiram2012 <- evadiram[evadiram$MAT_TUR_ANO == 2012, ]
evadiram2010 <- evadiram[evadiram$MAT_TUR_ANO == 2010, ]
evadiram2011 <- evadiram[evadiram$MAT_TUR_ANO == 2011, ]
evadiram2012 <- evadiram[evadiram$MAT_TUR_ANO == 2012, ]
evadiram2001 <- evadiram[evadiram$MAT_TUR_ANO == 2001, ]
evadiram2003 <- evadiram[evadiram$MAT_TUR_ANO == 2003, ]
install.packages("ggplot2")
counts <- table(treino_classificacao$EVADIU == TRUE)
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
counts <- table(treino_classificacao$EVADIU)
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
counts <- table(treino_classificacao$EVADIU)
barplot(counts, main="Dados de treino",
xlab="Evasão")
counts <- table(treino_classificacao$MAT_TUR_ANO, treino_classificacao$EVADIU)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
counts <- table(treino_classificacao$EVADIU, treino_classificacao$MAT_TUR_ANO)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
counts <- table(treino_classificacao$EVADIU, treino_classificacao$MAT_TUR_ANO)
barplot(counts, main="Dados de treino",
xlab="Numero de alunos que evadiram por ano", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
counts <- table(treino_classificacao$EVADIU, treino_classificacao$MAT_TUR_ANO)
barplot(counts, main="Dados de treino",
xlab="Numero de alunos que evadiram por ano", col=c("darkblue","red"),
legend = rownames(counts), beside=FALSE)
counts <- table(treino_classificacao$EVADIU, treino_classificacao$MAT_TUR_ANO)
barplot(counts, main="Dados de treino",
xlab="Numero de alunos que evadiram por ano", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
