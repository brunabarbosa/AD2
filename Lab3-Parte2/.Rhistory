method='glm',
trControl = fitControl)
glmfit
glmfit <- train(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica,
data = train.clean,
method='glm',
trControl = fitControl,
preProc=c('scale', 'center'))
library(ISLR)
library(readr)
library(caret)
library(dplyr)
library(reshape2)
library(pROC)
library(ROSE)
library(caret)
treino_classificacao_v2 <- read_csv("treino_classificacao_v2.csv")
split <- createDataPartition(y=treino_classificacao_v2$EVADIU, p = 0.9, list = FALSE)
train <- treino_classificacao_v2[split,]
test <- treino_classificacao_v2[-split,]
unlink('lab3-parte2-Rmarkdown_cache', recursive = TRUE)
library(ISLR)
library(readr)
library(caret)
library(dplyr)
library(reshape2)
library(pROC)
library(ROSE)
library(caret)
set.seed(9560)
#setwd("~/AD2/Lab3-Parte2")
treino_classificacao_v2 <- read_csv("treino_classificacao_v2.csv")
##Reshape nos dados
classificacao.clean <- treino_classificacao_v2 %>%
filter(!is.na(MAT_MEDIA_FINAL))
classificacao.clean$CREDITOS <- 4
##novo atributo
classificacao.clean[classificacao.clean$MAT_TUR_ANO < 2011, "ENEM"] <- FALSE
classificacao.clean[classificacao.clean$MAT_TUR_ANO >= 2011, "ENEM"] <- TRUE
classificacao.cra <- classificacao.clean %>%
group_by(MAT_ALU_MATRICULA, EVADIU, ENEM) %>%
mutate(cra.contrib = MAT_MEDIA_FINAL*CREDITOS) %>%
summarise(cra = sum(cra.contrib)/sum(CREDITOS))
classificacao.model.input <- classificacao.clean %>%
group_by(MAT_ALU_MATRICULA,disciplina)  %>%
filter(MAT_MEDIA_FINAL == max(MAT_MEDIA_FINAL)) %>%
ungroup() %>%
select(MAT_ALU_MATRICULA,disciplina,MAT_MEDIA_FINAL) %>%
mutate(disciplina = as.factor(gsub(" ",".",disciplina))) %>%
dcast(MAT_ALU_MATRICULA ~ disciplina, mean) %>%
merge(classificacao.cra)
##Split dos dados
split <- createDataPartition(y=classificacao.model.input$EVADIU, p = 0.90, list = FALSE)
train <- classificacao.model.input[split,]
test <- classificacao.model.input[-split,]
##remove NA's
train.clean <- train %>%
filter(!is.na(Álgebra.Vetorial.e.Geometria.Analítica)) %>%
filter(!is.na(Cálculo.Diferencial.e.Integral.I)) %>%
filter(!is.na(Introdução.à.Computação)) %>%
filter(!is.na(Laboratório.de.Programação.I)) %>%
filter(!is.na(Programação.I)) %>%
filter(!is.na(Leitura.e.Produção.de.Textos))
##remove NA's
test.clean <- test %>%
filter(!is.na(Álgebra.Vetorial.e.Geometria.Analítica)) %>%
filter(!is.na(Cálculo.Diferencial.e.Integral.I)) %>%
filter(!is.na(Introdução.à.Computação)) %>%
filter(!is.na(Laboratório.de.Programação.I)) %>%
filter(!is.na(Programação.I)) %>%
filter(!is.na(Leitura.e.Produção.de.Textos))
##Modelo com todas as disciplinas
model <- glm(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica
,family=binomial, data=train.clean)
summary(model)
##Modelo não balanceado
table(train$EVADIU)
##Modelo com todas as disciplinas + ENEM
model.attr <- glm(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica + ENEM
,family=binomial, data=train.clean)
##Modelo não balanceado
table(train$EVADIU)
up_train <- upSample(x = train.clean[, -ncol(train.clean)],
y = train.clean$EVADIU)
library(ISLR)
library(readr)
library(caret)
library(dplyr)
library(reshape2)
library(pROC)
library(ROSE)
library(caret)
set.seed(9560)
#setwd("~/AD2/Lab3-Parte2")
treino_classificacao_v2 <- read_csv("treino_classificacao_v2.csv")
##Reshape nos dados
classificacao.clean <- treino_classificacao_v2 %>%
filter(!is.na(MAT_MEDIA_FINAL))
classificacao.clean$CREDITOS <- 4
##novo atributo
classificacao.clean[classificacao.clean$MAT_TUR_ANO < 2011, "ENEM"] <- FALSE
classificacao.clean[classificacao.clean$MAT_TUR_ANO >= 2011, "ENEM"] <- TRUE
classificacao.cra <- classificacao.clean %>%
group_by(MAT_ALU_MATRICULA, EVADIU, ENEM) %>%
mutate(cra.contrib = MAT_MEDIA_FINAL*CREDITOS) %>%
summarise(cra = sum(cra.contrib)/sum(CREDITOS))
classificacao.model.input <- classificacao.clean %>%
group_by(MAT_ALU_MATRICULA,disciplina)  %>%
filter(MAT_MEDIA_FINAL == max(MAT_MEDIA_FINAL)) %>%
ungroup() %>%
select(MAT_ALU_MATRICULA,disciplina,MAT_MEDIA_FINAL) %>%
mutate(disciplina = as.factor(gsub(" ",".",disciplina))) %>%
dcast(MAT_ALU_MATRICULA ~ disciplina, mean) %>%
merge(classificacao.cra)
##Split dos dados
split <- createDataPartition(y=classificacao.model.input$EVADIU, p = 0.90, list = FALSE)
train <- classificacao.model.input[split,]
test <- classificacao.model.input[-split,]
##remove NA's
train.clean <- train %>%
filter(!is.na(Álgebra.Vetorial.e.Geometria.Analítica)) %>%
filter(!is.na(Cálculo.Diferencial.e.Integral.I)) %>%
filter(!is.na(Introdução.à.Computação)) %>%
filter(!is.na(Laboratório.de.Programação.I)) %>%
filter(!is.na(Programação.I)) %>%
filter(!is.na(Leitura.e.Produção.de.Textos))
##remove NA's
test.clean <- test %>%
filter(!is.na(Álgebra.Vetorial.e.Geometria.Analítica)) %>%
filter(!is.na(Cálculo.Diferencial.e.Integral.I)) %>%
filter(!is.na(Introdução.à.Computação)) %>%
filter(!is.na(Laboratório.de.Programação.I)) %>%
filter(!is.na(Programação.I)) %>%
filter(!is.na(Leitura.e.Produção.de.Textos))
##Modelo com todas as disciplinas
model <- glm(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica
,family=binomial, data=train.clean)
summary(model)
##Modelo não balanceado
table(train$EVADIU)
##Modelo com todas as disciplinas + ENEM
model.attr <- glm(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica + ENEM
,family=binomial, data=train.clean)
##Modelo não balanceado
table(train$EVADIU)
train$EVADIU <- as.factor(train$EVADIU)
train$MAT_ALU_MATRICULA <- as.factor(train$MAT_ALU_MATRICULA)
train$ENEM <- as.logical(train$ENEM)
is.factor(train$EVADIU)
is.factor(train$MAT_ALU_MATRICULA)
up_train <- upSample(x = train.clean[, -ncol(train.clean)],
y = train.clean$EVADIU)
library(ISLR)
library(readr)
library(caret)
library(dplyr)
library(reshape2)
library(pROC)
library(ROSE)
library(caret)
set.seed(9560)
#setwd("~/AD2/Lab3-Parte2")
treino_classificacao_v2 <- read_csv("treino_classificacao_v2.csv")
##Reshape nos dados
classificacao.clean <- treino_classificacao_v2 %>%
filter(!is.na(MAT_MEDIA_FINAL))
classificacao.clean$CREDITOS <- 4
##novo atributo
classificacao.clean[classificacao.clean$MAT_TUR_ANO < 2011, "ENEM"] <- FALSE
classificacao.clean[classificacao.clean$MAT_TUR_ANO >= 2011, "ENEM"] <- TRUE
classificacao.cra <- classificacao.clean %>%
group_by(MAT_ALU_MATRICULA, EVADIU, ENEM) %>%
mutate(cra.contrib = MAT_MEDIA_FINAL*CREDITOS) %>%
summarise(cra = sum(cra.contrib)/sum(CREDITOS))
classificacao.model.input <- classificacao.clean %>%
group_by(MAT_ALU_MATRICULA,disciplina)  %>%
filter(MAT_MEDIA_FINAL == max(MAT_MEDIA_FINAL)) %>%
ungroup() %>%
select(MAT_ALU_MATRICULA,disciplina,MAT_MEDIA_FINAL) %>%
mutate(disciplina = as.factor(gsub(" ",".",disciplina))) %>%
dcast(MAT_ALU_MATRICULA ~ disciplina, mean) %>%
merge(classificacao.cra)
##Split dos dados
split <- createDataPartition(y=classificacao.model.input$EVADIU, p = 0.90, list = FALSE)
train <- classificacao.model.input[split,]
test <- classificacao.model.input[-split,]
##to factor
train$EVADIU <- as.factor(train$EVADIU)
train$MAT_ALU_MATRICULA <- as.factor(train$MAT_ALU_MATRICULA)
train$ENEM <- as.logical(train$ENEM)
is.factor(train$EVADIU)
is.factor(train$MAT_ALU_MATRICULA)
##remove NA's
train.clean <- train %>%
filter(!is.na(Álgebra.Vetorial.e.Geometria.Analítica)) %>%
filter(!is.na(Cálculo.Diferencial.e.Integral.I)) %>%
filter(!is.na(Introdução.à.Computação)) %>%
filter(!is.na(Laboratório.de.Programação.I)) %>%
filter(!is.na(Programação.I)) %>%
filter(!is.na(Leitura.e.Produção.de.Textos))
##remove NA's
test.clean <- test %>%
filter(!is.na(Álgebra.Vetorial.e.Geometria.Analítica)) %>%
filter(!is.na(Cálculo.Diferencial.e.Integral.I)) %>%
filter(!is.na(Introdução.à.Computação)) %>%
filter(!is.na(Laboratório.de.Programação.I)) %>%
filter(!is.na(Programação.I)) %>%
filter(!is.na(Leitura.e.Produção.de.Textos))
up_train <- upSample(x = train.clean[, -ncol(train.clean)],
y = train.clean$EVADIU)
table(up_train$EVADIU)
model.up <- glm(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica
,family=binomial, data=up_train)
unlink('lab3-parte2-Rmarkdown_cache', recursive = TRUE)
library(ISLR)
library(readr)
library(caret)
library(dplyr)
library(reshape2)
library(pROC)
library(ROSE)
library(caret)
set.seed(9560)
#setwd("~/AD2/Lab3-Parte2")
treino_classificacao_v2 <- read_csv("treino_classificacao_v2.csv")
##Reshape nos dados
classificacao.clean <- treino_classificacao_v2 %>%
filter(!is.na(MAT_MEDIA_FINAL))
classificacao.clean$CREDITOS <- 4
##novo atributo
classificacao.clean[classificacao.clean$MAT_TUR_ANO < 2011, "ENEM"] <- FALSE
classificacao.clean[classificacao.clean$MAT_TUR_ANO >= 2011, "ENEM"] <- TRUE
classificacao.cra <- classificacao.clean %>%
group_by(MAT_ALU_MATRICULA, EVADIU, ENEM) %>%
mutate(cra.contrib = MAT_MEDIA_FINAL*CREDITOS) %>%
summarise(cra = sum(cra.contrib)/sum(CREDITOS))
classificacao.model.input <- classificacao.clean %>%
group_by(MAT_ALU_MATRICULA,disciplina)  %>%
filter(MAT_MEDIA_FINAL == max(MAT_MEDIA_FINAL)) %>%
ungroup() %>%
select(MAT_ALU_MATRICULA,disciplina,MAT_MEDIA_FINAL) %>%
mutate(disciplina = as.factor(gsub(" ",".",disciplina))) %>%
dcast(MAT_ALU_MATRICULA ~ disciplina, mean) %>%
merge(classificacao.cra)
##Split dos dados
split <- createDataPartition(y=classificacao.model.input$EVADIU, p = 0.90, list = FALSE)
train <- classificacao.model.input[split,]
test <- classificacao.model.input[-split,]
##to factor
train$EVADIU <- as.factor(train$EVADIU)
train$MAT_ALU_MATRICULA <- as.factor(train$MAT_ALU_MATRICULA)
train$ENEM <- as.logical(train$ENEM)
is.factor(train$EVADIU)
is.factor(train$MAT_ALU_MATRICULA)
##remove NA's
train.clean <- train %>%
filter(!is.na(Álgebra.Vetorial.e.Geometria.Analítica)) %>%
filter(!is.na(Cálculo.Diferencial.e.Integral.I)) %>%
filter(!is.na(Introdução.à.Computação)) %>%
filter(!is.na(Laboratório.de.Programação.I)) %>%
filter(!is.na(Programação.I)) %>%
filter(!is.na(Leitura.e.Produção.de.Textos))
##remove NA's
test.clean <- test %>%
filter(!is.na(Álgebra.Vetorial.e.Geometria.Analítica)) %>%
filter(!is.na(Cálculo.Diferencial.e.Integral.I)) %>%
filter(!is.na(Introdução.à.Computação)) %>%
filter(!is.na(Laboratório.de.Programação.I)) %>%
filter(!is.na(Programação.I)) %>%
filter(!is.na(Leitura.e.Produção.de.Textos))
##Modelo com todas as disciplinas
model <- glm(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica
,family=binomial, data=train.clean)
summary(model)
##Modelo não balanceado
table(train$EVADIU)
##Modelo com todas as disciplinas + ENEM
model.attr <- glm(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica + ENEM
,family=binomial, data=train.clean)
##Modelo não balanceado
table(train$EVADIU)
#oversampling
up_train <- upSample(x = train.clean[, -ncol(train.clean)],
y = train.clean$EVADIU)
table(up_train$EVADIU)
##modelo com balanceamento
model.up <- glm(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica
,family=binomial, data=up_train)
library(ISLR)
library(readr)
library(caret)
library(dplyr)
library(reshape2)
library(pROC)
library(ROSE)
library(caret)
set.seed(9560)
#setwd("~/AD2/Lab3-Parte2")
treino_classificacao_v2 <- read_csv("treino_classificacao_v2.csv")
##Reshape nos dados
classificacao.clean <- treino_classificacao_v2 %>%
filter(!is.na(MAT_MEDIA_FINAL))
classificacao.clean$CREDITOS <- 4
##novo atributo
classificacao.clean[classificacao.clean$MAT_TUR_ANO < 2011, "ENEM"] <- FALSE
classificacao.clean[classificacao.clean$MAT_TUR_ANO >= 2011, "ENEM"] <- TRUE
classificacao.cra <- classificacao.clean %>%
group_by(MAT_ALU_MATRICULA, EVADIU, ENEM) %>%
mutate(cra.contrib = MAT_MEDIA_FINAL*CREDITOS) %>%
summarise(cra = sum(cra.contrib)/sum(CREDITOS))
classificacao.model.input <- classificacao.clean %>%
group_by(MAT_ALU_MATRICULA,disciplina)  %>%
filter(MAT_MEDIA_FINAL == max(MAT_MEDIA_FINAL)) %>%
ungroup() %>%
select(MAT_ALU_MATRICULA,disciplina,MAT_MEDIA_FINAL) %>%
mutate(disciplina = as.factor(gsub(" ",".",disciplina))) %>%
dcast(MAT_ALU_MATRICULA ~ disciplina, mean) %>%
merge(classificacao.cra)
##Split dos dados
split <- createDataPartition(y=classificacao.model.input$EVADIU, p = 0.90, list = FALSE)
train <- classificacao.model.input[split,]
test <- classificacao.model.input[-split,]
##to factor
train$EVADIU <- as.factor(train$EVADIU)
train$MAT_ALU_MATRICULA <- as.factor(train$MAT_ALU_MATRICULA)
train$ENEM <- as.logical(train$ENEM)
is.factor(train$EVADIU)
is.factor(train$MAT_ALU_MATRICULA)
##remove NA's
train.clean <- train %>%
filter(!is.na(Álgebra.Vetorial.e.Geometria.Analítica)) %>%
filter(!is.na(Cálculo.Diferencial.e.Integral.I)) %>%
filter(!is.na(Introdução.à.Computação)) %>%
filter(!is.na(Laboratório.de.Programação.I)) %>%
filter(!is.na(Programação.I)) %>%
filter(!is.na(Leitura.e.Produção.de.Textos))
##remove NA's
test.clean <- test %>%
filter(!is.na(Álgebra.Vetorial.e.Geometria.Analítica)) %>%
filter(!is.na(Cálculo.Diferencial.e.Integral.I)) %>%
filter(!is.na(Introdução.à.Computação)) %>%
filter(!is.na(Laboratório.de.Programação.I)) %>%
filter(!is.na(Programação.I)) %>%
filter(!is.na(Leitura.e.Produção.de.Textos))
##Modelo com todas as disciplinas
model <- glm(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica
,family=binomial, data=train.clean)
summary(model)
##Modelo não balanceado
table(train$EVADIU)
##Modelo com todas as disciplinas + ENEM
model.attr <- glm(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica + ENEM
,family=binomial, data=train.clean)
##Modelo não balanceado
table(train$EVADIU)
#oversampling
up_train <- upSample(x = train.clean[, -ncol(train.clean)],
y = train.clean$EVADIU)
table(up_train$EVADIU)
##modelo com balanceamento
model.up <- glm(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica
,family=binomial, data=up_train)
library(ISLR)
library(readr)
library(caret)
library(dplyr)
library(reshape2)
library(pROC)
library(ROSE)
library(caret)
set.seed(9560)
#setwd("~/AD2/Lab3-Parte2")
treino_classificacao_v2 <- read_csv("treino_classificacao_v2.csv")
##Reshape nos dados
classificacao.clean <- treino_classificacao_v2 %>%
filter(!is.na(MAT_MEDIA_FINAL))
classificacao.clean$CREDITOS <- 4
##novo atributo
classificacao.clean[classificacao.clean$MAT_TUR_ANO < 2011, "ENEM"] <- FALSE
classificacao.clean[classificacao.clean$MAT_TUR_ANO >= 2011, "ENEM"] <- TRUE
classificacao.cra <- classificacao.clean %>%
group_by(MAT_ALU_MATRICULA, EVADIU, ENEM) %>%
mutate(cra.contrib = MAT_MEDIA_FINAL*CREDITOS) %>%
summarise(cra = sum(cra.contrib)/sum(CREDITOS))
classificacao.model.input <- classificacao.clean %>%
group_by(MAT_ALU_MATRICULA,disciplina)  %>%
filter(MAT_MEDIA_FINAL == max(MAT_MEDIA_FINAL)) %>%
ungroup() %>%
select(MAT_ALU_MATRICULA,disciplina,MAT_MEDIA_FINAL) %>%
mutate(disciplina = as.factor(gsub(" ",".",disciplina))) %>%
dcast(MAT_ALU_MATRICULA ~ disciplina, mean) %>%
merge(classificacao.cra)
##Split dos dados
split <- createDataPartition(y=classificacao.model.input$EVADIU, p = 0.90, list = FALSE)
train <- classificacao.model.input[split,]
test <- classificacao.model.input[-split,]
##to factor
train$EVADIU <- as.factor(train$EVADIU)
train$MAT_ALU_MATRICULA <- as.factor(train$MAT_ALU_MATRICULA)
train$ENEM <- as.logical(train$ENEM)
is.factor(train$EVADIU)
is.factor(train$MAT_ALU_MATRICULA)
##remove NA's
train.clean <- train %>%
filter(!is.na(Álgebra.Vetorial.e.Geometria.Analítica)) %>%
filter(!is.na(Cálculo.Diferencial.e.Integral.I)) %>%
filter(!is.na(Introdução.à.Computação)) %>%
filter(!is.na(Laboratório.de.Programação.I)) %>%
filter(!is.na(Programação.I)) %>%
filter(!is.na(Leitura.e.Produção.de.Textos))
##remove NA's
test.clean <- test %>%
filter(!is.na(Álgebra.Vetorial.e.Geometria.Analítica)) %>%
filter(!is.na(Cálculo.Diferencial.e.Integral.I)) %>%
filter(!is.na(Introdução.à.Computação)) %>%
filter(!is.na(Laboratório.de.Programação.I)) %>%
filter(!is.na(Programação.I)) %>%
filter(!is.na(Leitura.e.Produção.de.Textos))
##Modelo com todas as disciplinas
model <- glm(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica
,family=binomial, data=train.clean)
summary(model)
##Modelo não balanceado
table(train$EVADIU)
##Modelo com todas as disciplinas + ENEM
model.attr <- glm(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica + ENEM
,family=binomial, data=train.clean)
##Modelo não balanceado
table(train$EVADIU)
up_train <- upSample(x = train.clean[, -ncol(train.clean)],
y = train.clean$EVADIU)
table(up_train$EVADIU)
model.up <- glm(EVADIU ~ Cálculo.Diferencial.e.Integral.I
+ Introdução.à.Computação
+ Laboratório.de.Programação.I
+ Leitura.e.Produção.de.Textos
+ Programação.I
+ Álgebra.Vetorial.e.Geometria.Analítica
,family=binomial, data=up_train)
unlink('lab3-parte2-Rmarkdown_cache', recursive = TRUE)
unlink('lab3-parte2-Rmarkdown_cache', recursive = TRUE)
unlink('lab3-parte2-Rmarkdown_cache', recursive = TRUE)
